{"version":3,"sources":["WeatherData.js","Description.js","Scard.js","ApiClient.js","App.js","serviceWorker.js","index.js"],"names":["WeatherData","props","Table","striped","bordered","hover","size","colSpan","max","min","wind","Description","Card","className","Body","Text","text","Scard","day","Date","parseInt","dateString","nameDay","getDay","month","getMonth","date","getDate","image","img","maxTemp","Math","round","minTemp","windSpeed","dataKey","style","marginTop","top","width","src","alt","key","ApiClient","response","status","Promise","resolve","reject","Error","statusText","this","getRequest","url","axios","get","then","catch","error","console","alert","App","state","loading","weather","apiClient","setState","fetching","getWeather","updateWeather","data","daily","finally","log","slice","map","current","i","Col","md","sm","xs","CardGroup","dt","icon","description","temp","wind_speed","fetchWeatherData","Container","Navbar","Brand","href","Row","marginBottom","buildCards","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4875414a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nconst WeatherData = (props) => {\r\n  return (\r\n    <div>\r\n      <Table striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <th colSpan=\"2\">\r\n              <sup>o</sup>C\r\n            </th>\r\n            <th>W</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td> {props.max}</td>\r\n            <td> {props.min}</td>\r\n            <td>{props.wind}</td>\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherData;\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nconst Description = (props) => {\r\n  return (\r\n    <div>\r\n      <Card className=\"mx-auto text-center mt-2 border-0\">\r\n        <Card.Body>\r\n          <Card.Text>{props.text}</Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Description;\r\n","import React from \"react\";\r\nimport WeatherData from \"./WeatherData\";\r\nimport Description from \"./Description\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./card-style.css\";\r\n\r\nconst Scard = (props) => {\r\n  const days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const day = new Date(parseInt(props.dateString) * 1000);\r\n  const nameDay = days[day.getDay(day)];\r\n  const month = months[day.getMonth(day)];\r\n  const date = day.getDate(day);\r\n  const image = `http://openweathermap.org/img/wn/${props.img}@2x.png`;\r\n  const maxTemp = Math.round(props.max, 1);\r\n  const minTemp = Math.round(props.min, 1);\r\n  const windSpeed = Math.round(props.wind, 1);\r\n  const dataKey = props.dateString + \"data\";\r\n  return (\r\n    <div className=\"card text-center\" >\r\n      <div className=\"card-body text-dark\">\r\n        <h4 className=\"card-title\" style={{ marginTop: \"30px\" }}> {nameDay}</h4>\r\n        <p className=\"card-text text-secondary\">\r\n          {date}, {month}\r\n        </p>\r\n      </div>\r\n      <div className=\"overflow\">\r\n        <img top width=\"40%\" src={image} alt={props.alt} />\r\n      </div>\r\n\r\n      <div className=\"description\">\r\n        <Description text={props.text} />\r\n      </div>\r\n      <div className=\"temp\">\r\n        <WeatherData\r\n          key={dataKey}\r\n          max={maxTemp}\r\n          min={minTemp}\r\n          wind={windSpeed}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scard;\r\n","import axios from \"axios\";\r\n\r\nexport class ApiClient {\r\n  status(response) {\r\n    if (response.status >= 200 && response.status < 300) {\r\n      return Promise.resolve(response);\r\n    } else {\r\n      return Promise.reject(new Error(response.statusText));\r\n    }\r\n  }\r\n  getWeather() {\r\n    return this.getRequest(\r\n      \"https:api.openweathermap.org/data/2.5/onecall?lat=53.383&lon=-1.466&exclude=hourly,minutely&units=metric&appid=75cc45c68f66808800a386f3a55995eb\"\r\n    );\r\n  }\r\n\r\n  getRequest(url) {\r\n    return axios\r\n      .get(url)\r\n      .then(this.status)\r\n      .catch(function (error) {\r\n        console.error(error);\r\n        alert(error);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Scard from \"./Scard\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport CardGroup from \"react-bootstrap/CardGroup\";\nimport { ApiClient } from \"./ApiClient\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: \"\",\n      weather: [],\n    };\n    this.apiClient = new ApiClient();\n  }\n\n  fetchWeatherData() {\n    this.setState({\n      loading: \"...loading\",\n      fetching: true,\n    });\n    this.apiClient\n      .getWeather()\n      .then((response) => {\n        this.updateWeather(response.data.daily);\n      })\n      .finally(() => {\n        this.setState(\n          {\n            loading: \"\",\n          },\n          console.log(this.state.weather)\n        );\n      });\n  }\n\n  updateWeather(response) {\n    this.setState({\n      weather: response,\n    });\n  }\n\n  buildCards() {\n    return this.state.weather.slice(0, 7).map((current, i) => (\n      <Col key={i} md={4} sm={6} xs={12}>\n        <CardGroup>\n          <Scard\n            dateString={current.dt}\n            img={current.weather[0].icon}\n            alt={current.weather[0].description}\n            text={current.weather[0].description}\n            max={current.temp.max}\n            min={current.temp.min}\n            wind={current.wind_speed}\n          />\n        </CardGroup>\n      </Col>\n    ));\n  }\n\n  componentDidMount() {\n    this.fetchWeatherData();\n  }\n\n  render() {\n    return (\n      <div>\n        <Container>\n          <Navbar>\n            <Navbar.Brand className=\"Brand\" href=\"#home\">\n              Weekly Weather Forecast For Sheffield{this.state.loading}\n            </Navbar.Brand>\n          </Navbar>\n          <Row style={{ marginBottom: \"40px\", marginTop: \"20px\" }}>\n            {this.buildCards()}\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}